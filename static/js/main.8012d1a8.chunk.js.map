{"version":3,"sources":["logo.svg","Component/ListItems.js","Component/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","items","console","log","listItems","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","aria-hidden","onClick","deleteItem","duration","easing","TodoList","handleInput","setState","currentItems","Date","now","state","filtereditems","filter","addItems","preventDefault","newItem","newItems","onSubmit","this","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oKAAAA,EAAOC,QAAU,IAA0B,kC,iNC0C5BC,MAtCf,SAAmBC,GACf,IAAMC,EAAQD,EAAMC,MACpBC,QAAQC,IAAI,YAAaH,GACzB,IAAMI,EAAYH,EAAMI,KAAI,SAACC,GACzB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACvC,2BAEI,2BAAOC,KAAK,OACZC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SACI,SAACC,GACGd,EAAMe,UAAUD,EAAEE,OAAOL,MAAML,EAAKE,QAK5C,8BACI,uBAAGD,UAAU,gBACbU,cAAY,OACZC,QAAU,kBAAMlB,EAAMmB,WAAWb,EAAKE,cAQlD,OADEN,QAAQC,IAAI,gBAAgBC,GAE1B,6BACI,kBAAC,IAAD,CAAUgB,SAAU,IAAKC,OAAO,eAC3BjB,KC/BJkB,EAAb,YACI,WAAYtB,GAAQ,IAAD,8BACf,4CAAMA,KAYVuB,YAAc,SAACT,GACX,EAAKU,SAAS,CACVC,aAAa,CACTb,KAAKE,EAAEE,OAAOL,MACdH,IAAIkB,KAAKC,UAjBF,EAsBnBZ,UAAY,SAACH,EAAKJ,GACd,IAAMP,EAAM,EAAK2B,MAAM3B,MACvBA,EAAMI,KAAI,SAAAC,GACHA,EAAKE,MAAQA,IACZF,EAAKM,KAAOA,MAGpB,EAAKY,SAAS,CACVvB,MAAMA,KA9BK,EAiCnBkB,WAAa,SAACX,GACV,IAAMqB,EAAgB,EAAKD,MAAM3B,MAAM6B,QAAO,SAAAxB,GAAI,OAAIA,EAAKE,MAAQA,KACnE,EAAKgB,SAAS,CACVvB,MAAM4B,KApCK,EAuCnBE,SAAW,SAACjB,GACRA,EAAEkB,iBACF,IAAMC,EAAU,EAAKL,MAAMH,aAC3B,GAAoB,KAAjBQ,EAAQrB,KACX,CACI,IAAMsB,EAAQ,sBAAO,EAAKN,MAAM3B,OAAlB,CAAwBgC,IACtC/B,QAAQC,IAAI,WAAW+B,GACvB,EAAKV,SAAS,CACVvB,MAAMiC,EACNT,aAAa,CACTb,KAAK,GACLJ,IAAI,QA/ChB,EAAKoB,MAAQ,CACR3B,MAAQ,GACRwB,aAAe,CACXb,KAAK,GACLJ,IAAI,KAPE,EADvB,sEA6DQ,OACI,yBAAKD,UAAU,QACZ,gCAEI,0BAAMG,GAAG,aAAayB,SAAUC,KAAKL,UAChC,2BAAOtB,KAAK,OACZ4B,YAAY,aACZ1B,MAAOyB,KAAKR,MAAMH,aAAab,KAC/BC,SAAUuB,KAAKb,cAEf,4BAAQd,KAAK,UAAb,SAGT,kBAAC,EAAD,CACAR,MAAOmC,KAAKR,MAAM3B,MAClBkB,WAAciB,KAAKjB,WACnBJ,UAAaqB,KAAKrB,iBA7EjC,GAA8BuB,aCSfC,MARf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,QCIciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.8012d1a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport './ListItems.css'\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props) {\r\n    const items = props.items;\r\n    console.log(\" props = \" ,props)\r\n    const listItems = items.map((item) =>{\r\n        return <div className=\"list\" key={item.key}>\r\n        <p>\r\n            {/* {item.text} */}\r\n            <input type=\"text\" \r\n            id={item.key}\r\n            value={item.text}\r\n            onChange = {\r\n                (e) => {\r\n                    props.setUpdate(e.target.value,item.key)\r\n                }\r\n        }\r\n            />\r\n            \r\n            <span>\r\n                <i className=\"fa fa-trash-o\" \r\n                aria-hidden=\"true\"\r\n                onClick={ () => props.deleteItem(item.key)}\r\n                />\r\n            </span>\r\n        </p>\r\n           \r\n        </div>\r\n    })\r\n      console.log(\"listeajsdhsa \",listItems) \r\n    return (\r\n        <div>\r\n            <FlipMove duration={300} easing=\"ease-in-out\">\r\n                {listItems}\r\n            </FlipMove>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default ListItems\r\n","import React, { Component } from 'react';\r\nimport './TodoList.css'\r\nimport ListItems from './ListItems';\r\n\r\nexport class TodoList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             items : [],\r\n             currentItems : {\r\n                 text:'',\r\n                 key:''\r\n             }\r\n        }\r\n    }\r\n    \r\n    \r\n    handleInput = (e) =>{\r\n        this.setState({\r\n            currentItems:{\r\n                text:e.target.value,\r\n                key:Date.now()\r\n            }\r\n        })\r\n    }\r\n\r\n    setUpdate = (text,key) =>{\r\n        const items=this.state.items;\r\n        items.map(item =>{\r\n            if(item.key === key){\r\n                item.text = text\r\n            }\r\n        })\r\n        this.setState({\r\n            items:items\r\n        })\r\n    }\r\n    deleteItem = (key) =>{\r\n        const filtereditems = this.state.items.filter(item => item.key !== key)\r\n        this.setState({\r\n            items:filtereditems\r\n        })\r\n    }\r\n    addItems = (e) =>{\r\n        e.preventDefault();\r\n        const newItem = this.state.currentItems;\r\n        if(newItem.text !== '')\r\n        {\r\n            const newItems = [...this.state.items,newItem]\r\n            console.log(\"items = \",newItems)\r\n            this.setState({\r\n                items:newItems,\r\n                currentItems:{\r\n                    text:'',\r\n                    key:''\r\n                }\r\n            })\r\n        \r\n        }\r\n       // console.log(newItem)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Todo\">\r\n               <header>\r\n                   \r\n                   <form id=\"to-do-form\" onSubmit={this.addItems}>\r\n                        <input type=\"text\" \r\n                        placeholder=\"Enter text\"\r\n                        value={this.state.currentItems.text}\r\n                        onChange={this.handleInput}\r\n                        />\r\n                        <button type=\"submit\">Add</button>\r\n                   </form>\r\n               </header>\r\n               <ListItems \r\n               items={this.state.items} \r\n               deleteItem = {this.deleteItem}\r\n               setUpdate = {this.setUpdate}\r\n               ></ListItems>\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { TodoList } from './Component/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}